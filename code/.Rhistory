xreg_tr=xreg[tr.int,]
xreg_te=xreg[-tr.int,]
if (sum(train_tr$hit!="0")<2 | sum(train_tr$hit!="1")<2){ # si casi todos son 0 o 1
pred=rep(round(mean(train_tr$hit)),nrow(train_te))  # la prediccion de test es el mismo valor que train
}else{
if(h2_1==2){
ft=as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S")
#     xtr <- xts(train_tr$hit,ft)
xtr <- xts(train_tr$hit*rnorm(length(train_tr$hit),1,1e-6),ft)  #multiplioco con ruido pequeño para evitar problemas de singularidad conseñales peridicas diarias
#     chartSeries(xtr)
fit=auto.arima(xtr,xreg=xreg_tr)
#     fit
maxlag=nrow(train_te)
pred=forecast(fit,h=maxlag,xreg=xreg_te)
#     plot(pred)
pred=pred$mean[1:maxlag]
} else {
xtr <- xts(train_tr$vol,as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S"))
#fit=ets(xtr)
# TODO
}
..
vcvv
)))))))))))))))))))))))
tt= sim.uwg %>% filter(iccid==sid)
xreg= xreg_total[xreg_total[,1]==sid,]
xreg=xreg[,-1]
vallossf=NULL
count=count+1
print(count)
#   xall <- xts(tt$vol,as.POSIXlt(tt$d, format="%Y-%m-%d %H:%M:%S"))
#   chartSeries(xall)
tr.int= 1:floor((1-porctg)*nrow(tt))
train_tr=tt[tr.int,]
train_te=tt[-tr.int,]
xreg_tr=xreg[tr.int,]
xreg_te=xreg[-tr.int,]
if (sum(train_tr$hit!="0")<2 | sum(train_tr$hit!="1")<2){ # si casi todos son 0 o 1
pred=rep(round(mean(train_tr$hit)),nrow(train_te))  # la prediccion de test es el mismo valor que train
}else{
if(h2_1==2){
ft=as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S")
#     xtr <- xts(train_tr$hit,ft)
xtr <- xts(train_tr$hit*rnorm(length(train_tr$hit),1,1e-6),ft)  #multiplioco con ruido pequeño para evitar problemas de singularidad conseñales peridicas diarias
#     chartSeries(xtr)
fit=auto.arima(xtr,xreg=xreg_tr)
#     fit
maxlag=nrow(train_te)
pred=forecast(fit,h=maxlag,xreg=xreg_te)
#     plot(pred)
pred=pred$mean[1:maxlag]
} else {
xtr <- xts(train_tr$vol,as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S"))
#fit=ets(xtr)
# TODO
}
#Transforma la prediccion de volumen en hit
pred[pred>0.5]=1
pred[pred<=0.5]=0
}
historyrunsm= mean(historyruns[,2])
historyrunssd= sd(historyruns[,2])
historyrunsm
historyrunssd
source.with.encoding('W:/DatathonI/timeserie_arimax2.R', encoding='UTF-8')
warnings()
View(historyruns)
# source("loaddat.R")
# source("preparedat.R")
load("dat.ini.Rdat")
source("librarycode.R")
library(lubridate)
library(ggplot2)
library(dplyr)
library(caret)
# library(glm2)
library(arm)
library(xts)
library(forecast)
library(quantmod)
library(corrplot)
set.seed(127)
#Obtener datos
#Extraer los datos en wide format para varias sim y luego hacer plot de su actividad
h2_1=2
if(h2_1==2){
#   sim.ids=sample(valsims, 200, replace=F)
#   sim.uwg=towidef2h(sim.ids)  # transformamos a wide format
load("sim.uwgh2_4_xtra.all.new.Rdat")  # tiene intervalos de 4 horas y resuelve el problema de imputacion de 2h al principio
} else {
#   sim.ids=sample(valsims, 200, replace=F)
#   sim.uwg=towidef1h(sim.ids)  # transformamos a wide format
load("sim.uwgh1.all.Rdat")
}
#Adecuar datos
sim.uwg[sim.uwg$hit==T,"hit"]=1
sim.uwg[sim.uwg$hit==F,"hit"]=0
sim.uwg$wd=as.factor(sim.uwg$wd)
sim.uwg$hd=as.factor(sim.uwg$hd)
sim.uwg$h2d=as.factor(sim.uwg$h2d)
sim.uwg$day=as.factor(sim.uwg$day)
sim.uwg$h4d=as.factor(sim.uwg$h4d)
# Create matrix of numeric predictors
wd_xreg=model.matrix(~sim.uwg$wd)[,-1]
h2d_xreg=model.matrix(~sim.uwg$h2d)[,-1]
xreg_total <- cbind(iccid=sim.uwg$iccid,
wd_xreg=wd_xreg,
h2d_xreg=h2d_xreg)
sid=4666
set.seed(123)
historyruns=NULL
historyrunstotal=NULL
count=0
true.pred.ts.reto=NULL # true and forecast predictions for ts reto valiadation
fore.pred.ts.reto=NULL
tt= sim.uwg %>% filter(iccid==sid)
xreg= xreg_total[xreg_total[,1]==sid,]
View(tt)
View(xreg)
xreg=xreg[,-1]
vallossf=NULL
count=count+1
print(count)
View(xreg)
h2_1==2
tr.int= 1:which(tt$d=="2015-04-24 22:00:00")
train_tr=tt[tr.int,]
train_te=tt[c(262,277),]
View(train_te)
View(train_tr)
xreg_tr=xreg[tr.int,]
xreg_te=xreg[c(262,277),]
View(xreg_te)
View(train_te)
sum(train_tr$hit!="0")<2 | sum(train_tr$hit!="1")<2
ft=as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S")
#     xtr <- xts(train_tr$hit,ft)
xtr <- xts(train_tr$hit*rnorm(length(train_tr$hit),1,1e-6),ft)  #multiplioco con ruido pequeño para evitar problemas de singularidad conseñales peridicas diarias
#     chartSeries(xtr)
chartSeries(xtr)
fit=auto.arima(xtr,xreg=xreg_tr)
maxlag=33
pred=forecast(fit,h=maxlag,xreg=xreg_te)
pred
tr.int
maxlag=33
fin_tr=which(tt$d=="2015-04-24 22:00:00")
maxlag=33
fin_tr=which(tt$d=="2015-04-24 22:00:00")
tr.int= 1:fin_tr
train_tr=tt[tr.int,]
train_te=tt[c(262,277),]
xreg_tr=xreg[tr.int,]
xreg_te=xreg[(fin_tr+1):(fin_tr+maxlag),]
tr.int
(fin_tr+1):(fin_tr+maxlag)
ft=as.POSIXlt(train_tr$d, format="%Y-%m-%d %H:%M:%S")
#     xtr <- xts(train_tr$hit,ft)
xtr <- xts(train_tr$hit*rnorm(length(train_tr$hit),1,1e-6),ft)  #multiplioco con ruido pequeño para evitar problemas de singularidad conseñales peridicas diarias
#     chartSeries(xtr)
fit=auto.arima(xtr,xreg=xreg_tr)
pred=forecast(fit,h=maxlag,xreg=xreg_te)
pred
nrow(pred)
length(pred$mean)
pred=pred$mean[c(18,33)]
pred
pred[pred>0.5]=1
pred[pred<=0.5]=0
pred
train_te$hit
source.with.encoding('W:/DatathonI/timeserie_arimax2.R', encoding='UTF-8')
View(historyruns)
View(train_te)
View(historyruns)
h2_1=2
if(h2_1==2){
#   sim.ids=sample(valsims, 200, replace=F)
#   sim.uwg=towidef2h(sim.ids)  # transformamos a wide format
load("sim.uwgh2_4_xtra.all.new.Rdat")  # tiene intervalos de 4 horas y resuelve el problema de imputacion de 2h al principio
} else {
#   sim.ids=sample(valsims, 200, replace=F)
#   sim.uwg=towidef1h(sim.ids)  # transformamos a wide format
load("sim.uwgh1.all.Rdat")
}
load("train_te_final.Rdat")
View(train_te_t)
View(sim.uwg)
salida=train_te_t[,"sal"]
sim.total=rbind(sim.uwg,train_te_t[,-ncol(train_te_t)])
View(sim.total)
View(train_te_t)
View(train_te_t)
str(train_te_t_t)
str(train_te_t)
load("train_te.Rdat")
View(train_te)
View(sim.uwg)
View(train_te)
train_te_n=train_te[1,]
View(train_te_n)
train_te_n$d
train_te_n$d="2015-05-02 00:00:00"
View(train_te_n)
View(train_te_n)
train_te_n=0
train_te_n=train_te[1,]
train_te_n[,]=0
View(train_te_n)
train_te_n$d="2015-05-02 00:00:00"
View(train_te_n)
save(train_te_n,file="train_te_n.Rdat")
load("train_te_n.Rdat")  #cargamos los datos de test para el reto para todas las sims
h2_1=2
load("sim.uwgh2_4_xtra.all.new.Rdat")  # tiene intervalos de 4 horas y resuelve el problema de imputacion de 2h al principio
#Adecuar datos
load("train_te_n.Rdat")
View(train_te_n)
View(train_te_n)
View(train_te_n)
View(sim.uwg)
View(train_te_n)
View(train_te_n)
View(train_te_n)
View(sim.uwg)
hini=strptime(2015-05-02 00:00:00, "%Y-%m-%d %H:%M:%S") #fecha de inicio de muestras con hora truncada
hfin=strptime(2015-05-04 16:00:00, "%Y-%m-%d %H:%M:%S") #fecha fin de muestras
sti=seq(hini,hfin,by="hour")
hini=strptime("2015-05-02 00:00:00", "%Y-%m-%d %H:%M:%S") #fecha de inicio de muestras con hora truncada
hfin=strptime("2015-05-04 17:00:00", "%Y-%m-%d %H:%M:%S") #fecha fin de muestras
sti=seq(hini,hfin,by="hour")
sti
sti=sti[-(seq(0,to=length(sti),by=2)),]
sti=sti[-(seq(0,to=length(sti),by=2))]
sti
sid=4666
train_te_n= data.frame(iccid=0,d=0,wd=0,hd=0,hserie=1:33,day=0,h2d=0,h4d=0,month=0,acc=0,apn=0,rplan=0,vol=0,hit=F)
train_te_n$apn=sim.p[sim.p$iccid==sid,"apn"]
train_te_n$rplan=sim.p[sim.p$iccid==sid,"assigned_rate_plan_id"]
train_te_n$acc=sim.p[sim.p$iccid==sid,"account_id"]
train_te_n$iccid=sid
load("dat.ini.Rdat")
train_te_n= data.frame(iccid=0,d=0,wd=0,hd=0,hserie=1:33,day=0,h2d=0,h4d=0,month=0,acc=0,apn=0,rplan=0,vol=0,hit=F)
train_te_n$apn=sim.p[sim.p$iccid==sid,"apn"]
train_te_n$rplan=sim.p[sim.p$iccid==sid,"assigned_rate_plan_id"]
train_te_n$acc=sim.p[sim.p$iccid==sid,"account_id"]
View(train_te_n)
train_te_n$iccid=sid
View(train_te_n)
train_te_n$hit=F
train_te_t=NULL
hini=strptime("2015-05-02 00:00:00", "%Y-%m-%d %H:%M:%S") #fecha de inicio de muestras con hora truncada
hfin=strptime("2015-05-04 17:00:00", "%Y-%m-%d %H:%M:%S") #fecha fin de muestras
sti=seq(hini,hfin,by="hour")
sti=sti[-(seq(0,to=length(sti),by=2))]
train_te_n= data.frame(iccid=0,d=0,wd=0,hd=0,hserie=1:33,day=0,h2d=0,h4d=0,month=0,acc=0,apn=0,rplan=0,vol=0,hit=F)
train_te_n$apn=sim.p[sim.p$iccid==sid,"apn"]
train_te_n$rplan=sim.p[sim.p$iccid==sid,"assigned_rate_plan_id"]
train_te_n$acc=sim.p[sim.p$iccid==sid,"account_id"]
train_te_n$iccid=sid
train_te_n$hit=F
i=1
for (date in sti){
train_te_n$d[i]=date
train_te_n$wd[i]=wday(date)
train_te_n$hd[i]=hour(date)
train_te_n$day[i]=day(date)
train_te_n$h2d[i]=floor(train_te_n$hd[i]/2)
train_te_n$h4d[i]=floor(train_te_n$h2d[i]/2)
train_te_n$month[i]=month(date)
i=i+1
}
train_te_t=rbind(train_te_t,train_te_n)
sti
date
str(sti)
as.character(date)
train_te_n$wd[i]=wday(date)
wday(date)
debugSource('W:/DatathonI/timeserie_arimax2.R', encoding='UTF-8')
dat
str(dat)
sti
sti[1]
length(sti)
str(sti[1])
debugSource('W:/DatathonI/timeserie_arimax2.R', encoding='UTF-8')
Q
Q
train_te_t=NULL
hini=strptime("2015-05-02 00:00:00", "%Y-%m-%d %H:%M:%S") #fecha de inicio de muestras con hora truncada
hfin=strptime("2015-05-04 17:00:00", "%Y-%m-%d %H:%M:%S") #fecha fin de muestras
sti=seq(hini,hfin,by="hour")
sti=sti[-(seq(0,to=length(sti),by=2))]
sid
train_te_n= data.frame(iccid=0,d=0,wd=0,hd=0,hserie=1:33,day=0,h2d=0,h4d=0,month=0,acc=0,apn=0,rplan=0,vol=0,hit=F)
train_te_n$apn=sim.p[sim.p$iccid==sid,"apn"]
train_te_n$rplan=sim.p[sim.p$iccid==sid,"assigned_rate_plan_id"]
train_te_n$acc=sim.p[sim.p$iccid==sid,"account_id"]
train_te_n$iccid=sid
train_te_n$hit=F
for (i in seq(length(sti))){
train_te_n$d[i]=format(sti[i],format="%Y-%m-%d %H:%M:%S")
train_te_n$wd[i]=wday(sti[i])
train_te_n$hd[i]=hour(sti[i])
train_te_n$day[i]=day(sti[i])
train_te_n$h2d[i]=floor(train_te_n$hd[i]/2)
train_te_n$h4d[i]=floor(train_te_n$h2d[i]/2)
train_te_n$month[i]=month(sti[i])
}
train_te_t=rbind(train_te_t,train_te_n)
View(train_te_t)
View(sim.p)
View(sim.p)
sim.p %>% filter(iccid==4666)
h2_1=2
load("sim.uwgh2_4_xtra.all.new.Rdat")  # tiene intervalos de 4 horas y resuelve el problema de imputacion de 2h al principio
#Adecuar datos
#Creamos una estructura con todos los datos de test hast ala fecha requerida
train_te_t=NULL
hini=strptime("2015-05-02 00:00:00", "%Y-%m-%d %H:%M:%S") #fecha de inicio de muestras con hora truncada
hfin=strptime("2015-05-04 17:00:00", "%Y-%m-%d %H:%M:%S") #fecha fin de muestras
sti=seq(hini,hfin,by="hour")
sti=sti[-(seq(0,to=length(sti),by=2))]
for (sid in sim.ids){
train_te_n= data.frame(iccid=0,d=0,wd=0,hd=0,hserie=1:33,day=0,h2d=0,h4d=0,month=0,acc=0,apn=0,rplan=0,vol=0,hit=F)
train_te_n$apn=sim.p[sim.p$iccid==sid,"apn"]
train_te_n$rplan=sim.p[sim.p$iccid==sid,"assigned_rate_plan_id"]
train_te_n$acc=sim.p[sim.p$iccid==sid,"account_id"]
train_te_n$iccid=sid
train_te_n$hit=F
for (i in seq(length(sti))){
train_te_n$d[i]=format(sti[i],format="%Y-%m-%d %H:%M:%S")
train_te_n$wd[i]=wday(sti[i])
train_te_n$hd[i]=hour(sti[i])
train_te_n$day[i]=day(sti[i])
train_te_n$h2d[i]=floor(train_te_n$hd[i]/2)
train_te_n$h4d[i]=floor(train_te_n$h2d[i]/2)
train_te_n$month[i]=month(sti[i])
}
train_te_t=rbind(train_te_t,train_te_n)
}
load("dat.ini.Rdat")
View(sim.u)
sim.p <- read.csv("SIM_properties.csv",header=TRUE, sep = ";")
sim.u <- read.csv("SIM_usage.csv",header=TRUE, sep = ";")
sum(is.na(sim.p))
View(sim.u)
sim.u=sim.u %>% filter(data_usage_raw_total  != 0)
library(dplyr)
sim.u=sim.u %>% filter(data_usage_raw_total  != 0)
View(sim.u)
sim.u <- read.csv("SIM_usage.csv",header=TRUE, sep = ";")
View(sim.u)
valsims=unique(sim.u$iccid)
sim.u=sim.u %>% filter(data_usage_raw_total  != 0)
View(sim.u)
load("dat.ini.Rdat")
View(sim.u)
sum(is.na(sim.p))
sim.u <- read.csv("SIM_usage.csv",header=TRUE, sep = ";")
sim.u=sim.u %>% filter(data_usage_raw_total  != 0)
valsims=unique(sim.u$iccid)
# source("loaddat.R")
# source("preparedat.R")
load("dat.ini.Rdat")
source("librarycode.R")
library(lubridate)
library(ggplot2)
library(dplyr)
library(caret)
# library(glm2)
library(arm)
library(xts)
library(forecast)
library(quantmod)
library(corrplot)
load("sim.uwgh2_4_xtra.all.new.Rdat")
nrow(sim.uwg)/6214
View(sim.uwg)
load("dat.ini.Rdat")
source("librarycode.R")
load(file="train_te_t_complete.Rdat")
View(train_te_t)
sim.total=rbind(sim.uwg,train_te_t)
a= sim.total %>% filter(iccid==4666)
View(a)
328+33
View(sim.uwg)
old=read.casv("Datathon_ManuelLopezMartin.1.0.csv", sep=";")
old=read.csv("Datathon_ManuelLopezMartin.1.0.csv", sep=";")
View(old)
new=read.csv("Datathon_ManuelLopezMartin.1.1.csv", sep=";")
View(new)
View(old)
sum(old$AFECTADA != new$AFECTADA)
sum(old$Periodo != new$Periodo)
sum(old$SIM != new$SIM)
# source("loaddat.R")
# source("preparedat.R")
load("dat.ini.Rdat")
source("librarycode.R")
library(lubridate)
library(ggplot2)
library(dplyr)
library(caret)
# library(glm2)
library(arm)
library(xts)
library(forecast)
library(quantmod)
library(corrplot)
load("sim.uwgh2_4_xtra.all.new.Rdat")  # tiene intervalos de 4 horas y resuelve el problema de imputacion de 2h al principio
sum(old$SIM != sim.ids)
u=unique(old$SIM)
sum( u!= sim.ids)
head(u)
tail(u)
head(sim.ids)
tail(sim.ids)
6214*2
View(sim.u)
old=read.csv("Datathon_ManuelLopezMartin.1.0.csv", sep=";")
new=read.csv("Datathon_ManuelLopezMartin.1.1.csv", sep=";")
sum(old$AFECTADA != new$AFECTADA)
sum(old$Periodo != new$Periodo)
sum(old$SIM != new$SIM)
u=unique(old$SIM)
sum( u!= sim.ids)
load("sim.uwgh2_4_xtra.all.new.Rdat")
u=unique(old$SIM)
sum( u!= sim.ids)
vals=1015;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
library(lubridate)
library(ggplot2)
library(dplyr)
library(entropy)
library(xts)
library(forecast)
library(quantmod)
library(corrplot)
vals=1015;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=1259;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=595;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=2375;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=1110;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=1310;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
vals=4478;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
View(sim.u)
View(sim.uwg)
View(temp)
vals=4479;id=1;temp= sim.uwg %>% filter(iccid==vals[id]);
# tsvol <- ts(temp$vol, start=c(2009, 1), end=c(2014, 12), frequency=12)
fd=as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S")
x <- xts(temp$vol,as.POSIXlt(temp$d, format="%Y-%m-%d %H:%M:%S"))
chartSeries(x)
View(temp)
View(sim.uwg)
View(tt)
View(sim.uwg)
set.seed(1237)
year <- sample(2009:2011, size = 9, replace = TRUE)
var1 <- c(rep("000000", 6), rep("100000", 3))
var2 <- c(paste0(var1[1:3],"01"),paste0(var1[4:5],"02"),paste0(var1[6],"03"),
paste0(var1[7:8],"01"),paste0(var1[9],"11"))
df <- data.frame(year = year, var1 = var1, var2 = var2)
View(df)
var1
var2
ind <- as.integer(substr(df$var2, 7, 9))
ind
vec <- vector(mode = "numeric", length = max(ind))
vec
View(historyruns)
View(new)
View(old)
View(sim.p)
View(df)
View(df)
rm(df)
